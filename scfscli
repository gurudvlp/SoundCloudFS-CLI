#!/bin/bash

#####################################################################################
#
#	Written by Chad Gould								October 1, 2012
#	www.gurudigitalsolutions.com
#
#####################################################################################
#	
#	Connects to existing scfsd and issues commands.  Makes possible searching 
#	for new genres to link to the existing structure, making new files on the
#	tree, removing existing branches on the tree, and changing the genres
#	associated with each folder
#
#####################################################################################

# Uncomment to debug
#set -x

##### GLOBAL VARIABLES ##############################################################

IP=127.0.0.1					# local host is where daemon listens
PORT=6034						# default is 6034
maxData=17						# default 18, don't recommend changing
prmpt=">"						# user prompt
borderCharacter='#'				# character bordering sections
curDir='/'						# sets starting directory
INVALID="                        FOR ASSISTANCE TYPE HELP"
invalid=$INVALID

#####################################################################################
# contains all functions related to the command line flags
#####################################################################################
function OPTIONS {
	flag_help="\
-h, --help		Prints this help to screen
--port			Sets the port number to connect on, default is 6034
--host			Sets the ip of the host to connect to, default localhost
"
	BADARGS="\
invalid usage of $1
$flag_help"
############### interprets the flags given
function FLAGS {
	until [[ $# -eq 0 ]]; do
		case $1 in
			--host)
				if [[ -n $2 ]]; then
					IP=$2
				else
					echo -e "$BADARGS"
					exit
				fi
				;;
			--port)
				if [[ -n $2 ]]; then
					PORT=$2
				else
					echo -e "$BADARGS"
					exit
				fi
				;;
		esac
	shift
	done
}
############### only shows help if -h or --help are passed
function HELP {
	until [[ $# -eq 0 ]]; do
		case $1 in
			-h|--help)
				echo -e "$flag_help"
				exit
				;;
		esac
	shift
	done
}


if [[ $# -ge 1 ]]; then
	HELP $@
	FLAGS $@
fi
#####################################################################################
}
OPTIONS $@

#####################################################################################
#	HELP LIST
#####################################################################################

helpList=(\
"ls,list       [ List the contents of the current directory by pages ]" \
"cd            [ Change to root directory unless PATHNAME is specified ]" \
"mkdir         [ Creates a directory, specify a PATHNAME ]" \
"rmdir         [ Removes a directory, specify a PATHNAME ]" \
"link,query    [ Mounts soundcloud results for given GENRE ]" \
"offset        [ Sets the result offset, default is 0 ]"\ 
"limit         [ Sets the limit of results, default is 20 ]"\ 
"prev,back     [ Scroll back a page of results ]" \
"next,forward  [ Scroll forward a page of results ]" \
"help          [ Displays this help ]" \
"q,quit,exit   [ Exits the scfsCLI ]" \
"                                   " \
"              [ COMMANDS AREN'T CASE SENSITIVE ]")

#####################################################################################
#	READS USERINPUT FROM PROMPT
#####################################################################################

function INPUT {
	echo -n "$curDir $prmpt"
	read -a key
	input=$key
	case ${key[@]} in
		# list
		[lL][sS]|[lL][iI][sS][tT])		
			LIST $curDir
			LOADING
			;;
		# change directory
		[cC][dD]*)
			CD ${key[1]}
			;;
		# make directory
		[mM][kK][dD][iI][rR]*)
			MKDIR ${key[1]}
			;;
		# remove directory
		[rR][mM][dD][iI][rR]*)
			RMDIR ${key[1]}
			;;
		# link or query username or genre
		[lL][iI][nN][kK]*|[qQ][uU][eE][rR][yY]*)
			LINK ${key[@]:1}
			LOADING
			wait
			;;
		# list genres
		[lL][sS][gG][eE][nN][rR][eE][sS])
			LSGENRES
			LOADING
			;;
		# list users
		[lL][sS][uU][sS][Ee][rR])
			LSUSERS
			LOADING
			;;
		# previous or back page
		[pP][rR][eE][vV]|[bB][aA][cC][kK])
			PREV_PAGE
			;;
		# next or forward page
		[nN][eE][xX][tT]|[fF][oO][rR][wW][aA][rR][dD])
			NEXT_PAGE
			;;
		# help
		[hH][eE][lL][pP])
			data=("${helpList[@]}")
			;;
		# exit or quit
		[Qq]|[qQ][uU][iI][tT]|[eE][xX][iI][tT])
			echo -e "GOODBYE"
			COLOR $reset
			exit
			;;
		# limit
		[Ll][Ii][Mm][Ii][Tt]*)
			LIMIT ${key[1]}
			;;
		# offset
		[Oo][Ff][Ff][Ss][Ee][Tt]*)
			OFFSET ${key[1]}
			;;
		*)
			invalid=$INVALID
			;;
	esac
	clear
	TERMINAL
}

#####################################################################################
#	SOUNDCLOUD USER FUNCTIONS
#####################################################################################
############### creates a branch on the directory tree
function MKDIR {
	echo -e "cd $curDir\nmkdir $1\nexit" | nc $IP $PORT
	LS
}
###############	remove a branch from the directory tree
function RMDIR {
	echo -e "cd $curDir\nrmdir $1\nexit" | nc $IP $PORT
	LS
}
###############	list all branches/files in current directory
function LIST {
	PAGE_NUM="PAGE=$page" 
	if [[ -n $curDir ]]; then
		set -f; IFS=$'\n'
		data=($(echo -e "cd ${curDir#/}\nls\nexit" | nc $IP $PORT))
		unset IFS; set +f
	elif [[ -z $curDir ]]; then
		set -f; IFS=$'\n'
		data=($(echo -e "ls\nexit" | nc $IP $PORT))
		unset IFS; set +f
	fi
}
############### changes the directory to given argument
function CD {
	updir='..'
	if [[ ! -n $1 ]]; then
		unset curDir
		curDir='/'
	elif [[ $1 == $updir ]]; then
		curDir=${curDir%/*}
		if [[ -z $curDir ]]; then
			curDir='/'
		fi
	elif [[ $1 == /* ]]; then
		curDir=$1
	else
		if [[ $curDir == "/" ]]; then
			curDir=$curDir$1
		else
			curDir=$curDir/$1
		fi
	fi
	LIST
}
############## links a genre type with the current directory
function LINK {
	function QUERY {
	echo -e "cd $curDir\nquery $1 $2\nexit" | nc $IP $PORT
	}
	case $1 in
		[Gg]*)
			QUERY genres $2
			;;
		[Uu]*|[aA]*)
			QUERY username $2
			;;
		*)
			invalid=$INVALID
			;;
	esac
}
############### lists genres associated with the directory
function LSGENRES {
	set -f; IFS=$'\n'
	data=($(echo -e "cd $curDir\nlsgenres\nexit" | nc $IP $PORT))
	unset IFS; set +f
}
############### list users associated with the directory
function LSUSER {
	set -f; IFS=$'\n'
	data=($(echo -e "cd $curDir\nlsuser\nexit" | nc $IP $PORT))
	unset IFS; set +f
}
############### sets the limit of results obtained from a query
function LIMIT {
	echo -e "cd $curDir\nquery limit $1\nexit" | nc $IP $PORT
}
############### sets the offset of results obtained from a query
function OFFSET {
	echo -e "cd $curDir\nquery offset $1\nexit" | nc $IP $PORT
}

#####################################################################################
#	BUILTIN USER FUNCTIONS
#####################################################################################
############### page forward in results list
function PREV_PAGE {
	if [[ $page -gt 1 ]]; then
		page=$((page-1))
	else
		input="ALREADY AT PAGE 1"
	fi
}
############### back page in result list
function NEXT_PAGE {
	if [[ $page -lt $totalPages ]]; then
		page=$((page+1))
	else
		input="ALREADY AT LAST PAGE"
	fi
}

#####################################################################################
#	BUILTIN MENU FUNCTIONS
#####################################################################################
function MENU_OPTIONS {
#### Color values #####
	gray=0		# GRAY
	dblue=1		# DARK BLUE
	dgreen=2	# DARK GREEN
	lblue=3		# LIGHT BLUE
	red=4		# RED
	purple=5	# PURPLE
	orange=6	# ORANGE
	white=7		# WHITE
	lgreen=8	# LIGHT GREEN
	reset=sgr0	# RESET
##### Terminal dimensions #####
	size=($(stty size))
	height=${size[0]};width=${size[1]}
##### Header boreder #####
	until [[ ${#borderLine} -ge $width ]]; do
		borderLine="$borderLine$borderCharacter"
	done
	header=$borderLine
}

#####################################################################################
#	MENU FUNCTIONS
#####################################################################################
############### sets colors to outputs
function COLOR {
	tput setf $1
}
############### Text displayed at to of terminal
function INFO {
	info="   WELCOME TO THE SOUNDCLOUD FILE SYSTEM COMMAND LINE INTERFACE! (scfsCLI)\n $invalid"
	unset invalid
}
############### Lists data from data array
function DATALIST {
	unset dataList
	[[ -z $page ]] && page=1
#	 GET DATA COUNT
	dataTotal=${#data[@]}
#	 TOTALS NUMBER OF DATA PAGES
	totalPages=$((dataTotal/maxData))
	if [[ $((dataTotal%maxData)) -gt 0 ]]; then
		totalPages=$((totalPages+1))
	fi
#	 DETERMINE START INDEX
	index=$((page-1))
	index=$((index*$maxData))
#	 DETERMINE END INDEX
	maxIndex=$((maxData*page))
#	 BUILDS THE DATA LIST
	if [[ $dataTotal -gt 0 ]]; then
		until [[ $index = $maxIndex ]]; do
			if [[ ${data[index]} != OK ]]; then
				dataList="$dataList${data[index]#*:}\n"
			fi
			index=$((index+1))
		done
	else
#	 PRESERVE DATALIST AREA WITH WHITESPACE
		until [[ $index = $maxData ]]; do
		dataList="$dataList\n"
		index=$((index+1))
		done
	fi
}
############### Displays useful variables to terminal
function FEEDBACK {
	unset feedback
	indent=1
	onscreen=(INPUT=$input "$PAGE_NUM")
	spacing=$((width/${#onscreen[@]}))
	for item in "${onscreen[@]}"; do
		until [[ ${#front} -ge $indent ]]; do
			front="$front "
		done
		line="$front$item"
		until [[ ${#line} -ge $spacing ]]; do
			line="$line "
		done
		feedback="$feedback$line"
	done
}
function LOADING {
	clear
	COLOR $dgreen;	echo -e "$header"
	COLOR $red; echo -e "	LOADING......"
}
#####################################################################################
#	OUTPUT TO USER
#####################################################################################

TERMINAL () {
	DATALIST
	INFO
	FEEDBACK
	tput bold
	COLOR $dgreen;	echo -e "$header"
	COLOR $dblue; 	echo -e "$info"
	COLOR $lblue;	echo -e "$dataList"
	COLOR $red;		echo -e "$feedback"
	COLOR $dgreen;	echo -e "$header"
	COLOR $reset
	COLOR $purple;	INPUT
}
############### Initialize menu options
MENU_OPTIONS
############### Start terminal loop
TERMINAL
